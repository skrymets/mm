<binding name="binding" package="freemind.controller.actions.generated.instance.instance" trim-whitespace="true">
  <mapping abstract="true" type-name="xml_action" class="freemind.controller.actions.instance.XmlAction"/>
  <mapping class="freemind.controller.actions.instance.CompoundAction" name="compound_action">
    <structure map-as="node_action"/>
    <collection get-method="getChoiceList" set-method="setChoiceList" usage="optional" create-type="java.util.ArrayList">
      <structure type="freemind.controller.actions.instance.CompoundAction$Choice" ordered="false" choice="true">
        <structure type="freemind.controller.actions.instance.CompoundAction" test-method="ifCompoundAction" get-method="getCompoundAction" set-method="setCompoundAction" usage="optional"/>
        <structure type="freemind.controller.actions.instance.SelectNodeAction" test-method="ifSelectNodeAction" get-method="getSelectNodeAction" set-method="setSelectNodeAction" usage="optional"/>
        <structure type="freemind.controller.actions.instance.CutNodeAction" test-method="ifCutNodeAction" get-method="getCutNodeAction" set-method="setCutNodeAction" usage="optional"/>
        <structure type="freemind.controller.actions.instance.PasteNodeAction" test-method="ifPasteNodeAction" get-method="getPasteNodeAction" set-method="setPasteNodeAction" usage="optional"/>
        <structure type="freemind.controller.actions.instance.UndoPasteNodeAction" test-method="ifUndoPasteNodeAction" get-method="getUndoPasteNodeAction" set-method="setUndoPasteNodeAction" usage="optional"/>
        <structure type="freemind.controller.actions.instance.RevertXmlAction" test-method="ifRevertXmlAction" get-method="getRevertXmlAction" set-method="setRevertXmlAction" usage="optional"/>
        <structure type="freemind.controller.actions.instance.BoldNodeAction" test-method="ifBoldNodeAction" get-method="getBoldNodeAction" set-method="setBoldNodeAction" usage="optional"/>
        <structure type="freemind.controller.actions.instance.StrikethroughNodeAction" test-method="ifStrikethroughNodeAction" get-method="getStrikethroughNodeAction" set-method="setStrikethroughNodeAction" usage="optional"/>
        <structure type="freemind.controller.actions.instance.ItalicNodeAction" test-method="ifItalicNodeAction" get-method="getItalicNodeAction" set-method="setItalicNodeAction" usage="optional"/>
        <structure type="freemind.controller.actions.instance.UnderlinedNodeAction" test-method="ifUnderlinedNodeAction" get-method="getUnderlinedNodeAction" set-method="setUnderlinedNodeAction" usage="optional"/>
        <structure type="freemind.controller.actions.instance.FontSizeNodeAction" test-method="ifFontSizeNodeAction" get-method="getFontSizeNodeAction" set-method="setFontSizeNodeAction" usage="optional"/>
        <structure type="freemind.controller.actions.instance.FontNodeAction" test-method="ifFontNodeAction" get-method="getFontNodeAction" set-method="setFontNodeAction" usage="optional"/>
        <structure type="freemind.controller.actions.instance.NodeColorFormatAction" test-method="ifNodeColorFormatAction" get-method="getNodeColorFormatAction" set-method="setNodeColorFormatAction" usage="optional"/>
        <structure type="freemind.controller.actions.instance.NodeBackgroundColorFormatAction" test-method="ifNodeBackgroundColorFormatAction" get-method="getNodeBackgroundColorFormatAction" set-method="setNodeBackgroundColorFormatAction" usage="optional"/>
        <structure type="freemind.controller.actions.instance.NodeStyleFormatAction" test-method="ifNodeStyleFormatAction" get-method="getNodeStyleFormatAction" set-method="setNodeStyleFormatAction" usage="optional"/>
        <structure type="freemind.controller.actions.instance.EdgeColorFormatAction" test-method="ifEdgeColorFormatAction" get-method="getEdgeColorFormatAction" set-method="setEdgeColorFormatAction" usage="optional"/>
        <structure type="freemind.controller.actions.instance.EdgeWidthFormatAction" test-method="ifEdgeWidthFormatAction" get-method="getEdgeWidthFormatAction" set-method="setEdgeWidthFormatAction" usage="optional"/>
        <structure type="freemind.controller.actions.instance.EdgeStyleFormatAction" test-method="ifEdgeStyleFormatAction" get-method="getEdgeStyleFormatAction" set-method="setEdgeStyleFormatAction" usage="optional"/>
        <structure type="freemind.controller.actions.instance.DeleteNodeAction" test-method="ifDeleteNodeAction" get-method="getDeleteNodeAction" set-method="setDeleteNodeAction" usage="optional"/>
        <structure type="freemind.controller.actions.instance.EditNodeAction" test-method="ifEditNodeAction" get-method="getEditNodeAction" set-method="setEditNodeAction" usage="optional"/>
        <structure type="freemind.controller.actions.instance.NewNodeAction" test-method="ifNewNodeAction" get-method="getNewNodeAction" set-method="setNewNodeAction" usage="optional"/>
        <structure type="freemind.controller.actions.instance.FoldAction" test-method="ifFoldAction" get-method="getFoldAction" set-method="setFoldAction" usage="optional"/>
        <structure type="freemind.controller.actions.instance.MoveNodesAction" test-method="ifMoveNodesAction" get-method="getMoveNodesAction" set-method="setMoveNodesAction" usage="optional"/>
        <structure type="freemind.controller.actions.instance.HookNodeAction" test-method="ifHookNodeAction" get-method="getHookNodeAction" set-method="setHookNodeAction" usage="optional"/>
        <structure type="freemind.controller.actions.instance.AddIconAction" test-method="ifAddIconAction" get-method="getAddIconAction" set-method="setAddIconAction" usage="optional"/>
        <structure type="freemind.controller.actions.instance.RemoveIconXmlAction" test-method="ifRemoveIconXmlAction" get-method="getRemoveIconXmlAction" set-method="setRemoveIconXmlAction" usage="optional"/>
        <structure type="freemind.controller.actions.instance.RemoveAllIconsXmlAction" test-method="ifRemoveAllIconsXmlAction" get-method="getRemoveAllIconsXmlAction" set-method="setRemoveAllIconsXmlAction" usage="optional"/>
        <structure type="freemind.controller.actions.instance.MoveNodeXmlAction" test-method="ifMoveNodeXmlAction" get-method="getMoveNodeXmlAction" set-method="setMoveNodeXmlAction" usage="optional"/>
        <structure type="freemind.controller.actions.instance.AddCloudXmlAction" test-method="ifAddCloudXmlAction" get-method="getAddCloudXmlAction" set-method="setAddCloudXmlAction" usage="optional"/>
        <structure type="freemind.controller.actions.instance.CloudColorXmlAction" test-method="ifCloudColorXmlAction" get-method="getCloudColorXmlAction" set-method="setCloudColorXmlAction" usage="optional"/>
        <structure type="freemind.controller.actions.instance.AddArrowLinkXmlAction" test-method="ifAddArrowLinkXmlAction" get-method="getAddArrowLinkXmlAction" set-method="setAddArrowLinkXmlAction" usage="optional"/>
        <structure type="freemind.controller.actions.instance.AddLinkXmlAction" test-method="ifAddLinkXmlAction" get-method="getAddLinkXmlAction" set-method="setAddLinkXmlAction" usage="optional"/>
        <structure type="freemind.controller.actions.instance.RemoveArrowLinkXmlAction" test-method="ifRemoveArrowLinkXmlAction" get-method="getRemoveArrowLinkXmlAction" set-method="setRemoveArrowLinkXmlAction" usage="optional"/>
        <structure type="freemind.controller.actions.instance.ArrowLinkColorXmlAction" test-method="ifArrowLinkColorXmlAction" get-method="getArrowLinkColorXmlAction" set-method="setArrowLinkColorXmlAction" usage="optional"/>
        <structure type="freemind.controller.actions.instance.ArrowLinkArrowXmlAction" test-method="ifArrowLinkArrowXmlAction" get-method="getArrowLinkArrowXmlAction" set-method="setArrowLinkArrowXmlAction" usage="optional"/>
        <structure type="freemind.controller.actions.instance.ArrowLinkPointXmlAction" test-method="ifArrowLinkPointXmlAction" get-method="getArrowLinkPointXmlAction" set-method="setArrowLinkPointXmlAction" usage="optional"/>
        <structure type="freemind.controller.actions.instance.SetAttributeAction" test-method="ifSetAttributeAction" get-method="getSetAttributeAction" set-method="setSetAttributeAction" usage="optional"/>
        <structure type="freemind.controller.actions.instance.InsertAttributeAction" test-method="ifInsertAttributeAction" get-method="getInsertAttributeAction" set-method="setInsertAttributeAction" usage="optional"/>
        <structure type="freemind.controller.actions.instance.AddAttributeAction" test-method="ifAddAttributeAction" get-method="getAddAttributeAction" set-method="setAddAttributeAction" usage="optional"/>
        <structure type="freemind.controller.actions.instance.RemoveAttributeAction" test-method="ifRemoveAttributeAction" get-method="getRemoveAttributeAction" set-method="setRemoveAttributeAction" usage="optional"/>
        <structure type="freemind.controller.actions.instance.EditNoteToNodeAction" test-method="ifEditNoteToNodeAction" get-method="getEditNoteToNodeAction" set-method="setEditNoteToNodeAction" usage="optional"/>
        <structure type="freemind.controller.actions.instance.PlaceNodeXmlAction" test-method="ifPlaceNodeXmlAction" get-method="getPlaceNodeXmlAction" set-method="setPlaceNodeXmlAction" usage="optional"/>
      </structure>
    </collection>
  </mapping>
  <mapping class="freemind.controller.actions.instance.SelectNodeAction" name="select_node_action">
    <structure map-as="node_action"/>
  </mapping>
  <mapping class="freemind.controller.actions.instance.TransferableFile" name="transferable_file">
    <value style="attribute" name="file_name" get-method="getFileName" set-method="setFileName"/>
  </mapping>
  <mapping class="freemind.controller.actions.instance.TransferableContent" name="transferable_content">
    <collection item-type="freemind.controller.actions.instance.TransferableFile" get-method="getTransferableFileList" set-method="setTransferableFileList" usage="optional" create-type="java.util.ArrayList"/>
    <value style="element" name="Transferable" get-method="getTransferable" set-method="setTransferable" usage="optional"/>
    <value style="element" name="TransferableAsPlainText" get-method="getTransferableAsPlainText" set-method="setTransferableAsPlainText" usage="optional"/>
    <value style="element" name="TransferableAsRTF" get-method="getTransferableAsRTF" set-method="setTransferableAsRTF" usage="optional"/>
    <value style="element" name="TransferableAsDrop" get-method="getTransferableAsDrop" set-method="setTransferableAsDrop" usage="optional"/>
    <value style="element" name="TransferableAsHtml" get-method="getTransferableAsHtml" set-method="setTransferableAsHtml" usage="optional"/>
    <value style="element" name="TransferableAsImage" get-method="getTransferableAsImage" set-method="setTransferableAsImage" usage="optional"/>
  </mapping>
  <mapping class="freemind.controller.actions.instance.CutNodeAction" name="cut_node_action">
    <structure map-as="node_action"/>
  </mapping>
  <mapping class="freemind.controller.actions.instance.PasteNodeAction" name="paste_node_action">
    <structure map-as="node_action"/>
    <structure type="freemind.controller.actions.instance.TransferableContent" get-method="getTransferableContent" set-method="setTransferableContent"/>
    <value style="attribute" name="isLeft" get-method="isIsLeft" set-method="setIsLeft"/>
    <value style="attribute" name="asSibling" get-method="isAsSibling" set-method="setAsSibling"/>
  </mapping>
  <mapping class="freemind.controller.actions.instance.UndoPasteNodeAction" name="undo_paste_node_action">
    <structure map-as="node_action"/>
    <value style="attribute" name="isLeft" get-method="isIsLeft" set-method="setIsLeft"/>
    <value style="attribute" name="asSibling" get-method="isAsSibling" set-method="setAsSibling"/>
    <value style="attribute" name="node_amount" get-method="getNodeAmount" set-method="setNodeAmount"/>
  </mapping>
  <mapping class="freemind.controller.actions.instance.RevertXmlAction" name="revert_xml_action">
    <structure map-as="xml_action"/>
    <value style="attribute" name="map" get-method="getMap" set-method="setMap"/>
    <value style="attribute" name="localFileName" get-method="getLocalFileName" set-method="setLocalFileName" usage="optional"/>
    <value style="attribute" name="filePrefix" get-method="getFilePrefix" set-method="setFilePrefix" usage="optional"/>
  </mapping>
  <mapping abstract="true" type-name="node_action" class="freemind.controller.actions.instance.NodeAction">
    <structure map-as="xml_action"/>
    <value style="attribute" name="node" get-method="getNode" set-method="setNode"/>
  </mapping>
  <mapping class="freemind.controller.actions.instance.ChangeRootNodeAction" name="change_root_node_action">
    <structure map-as="node_action"/>
  </mapping>
  <mapping class="freemind.controller.actions.instance.AddIconAction" name="add_icon_action">
    <structure map-as="node_action"/>
    <value style="attribute" name="icon_name" get-method="getIconName" set-method="setIconName"/>
    <value style="attribute" name="icon_position" get-method="getIconPosition" set-method="setIconPosition"/>
  </mapping>
  <mapping class="freemind.controller.actions.instance.RemoveIconXmlAction" name="remove_icon_xml_action">
    <structure map-as="node_action"/>
    <value style="attribute" name="icon_position" get-method="getIconPosition" set-method="setIconPosition"/>
  </mapping>
  <mapping class="freemind.controller.actions.instance.RemoveAllIconsXmlAction" name="remove_all_icons_xml_action">
    <structure map-as="node_action"/>
  </mapping>
  <mapping class="freemind.controller.actions.instance.AddCloudXmlAction" name="add_cloud_xml_action">
    <structure map-as="node_action"/>
    <value style="attribute" name="enabled" get-method="isEnabled" set-method="setEnabled"/>
    <value style="attribute" name="color" get-method="getColor" set-method="setColor" usage="optional"/>
  </mapping>
  <mapping class="freemind.controller.actions.instance.MoveNodeXmlAction" name="move_node_xml_action">
    <structure map-as="node_action"/>
    <value style="attribute" name="v_gap" get-method="getVGap" set-method="setVGap"/>
    <value style="attribute" name="h_gap" get-method="getHGap" set-method="setHGap"/>
    <value style="attribute" name="shift_y" get-method="getShiftY" set-method="setShiftY"/>
  </mapping>
  <mapping class="freemind.controller.actions.instance.CloudColorXmlAction" name="cloud_color_xml_action">
    <structure map-as="node_action"/>
    <value style="attribute" name="color" get-method="getColor" set-method="setColor"/>
  </mapping>
  <mapping class="freemind.controller.actions.instance.AddLinkXmlAction" name="add_link_xml_action">
    <structure map-as="node_action"/>
    <value style="attribute" name="destination" get-method="getDestination" set-method="setDestination" usage="optional"/>
  </mapping>
  <mapping class="freemind.controller.actions.instance.AddArrowLinkXmlAction" name="add_arrow_link_xml_action">
    <structure map-as="node_action"/>
    <value style="attribute" name="destination" get-method="getDestination" set-method="setDestination"/>
    <value style="attribute" name="new_id" get-method="getNewId" set-method="setNewId" usage="optional"/>
    <value style="attribute" name="color" get-method="getColor" set-method="setColor" usage="optional"/>
    <value style="attribute" name="startInclination" get-method="getStartInclination" set-method="setStartInclination" usage="optional"/>
    <value style="attribute" name="endInclination" get-method="getEndInclination" set-method="setEndInclination" usage="optional"/>
    <value style="attribute" name="startArrow" get-method="getStartArrow" set-method="setStartArrow" usage="optional"/>
    <value style="attribute" name="endArrow" get-method="getEndArrow" set-method="setEndArrow" usage="optional"/>
  </mapping>
  <mapping class="freemind.controller.actions.instance.RemoveArrowLinkXmlAction" name="remove_arrow_link_xml_action">
    <structure map-as="xml_action"/>
    <value style="attribute" name="id" get-method="getId" set-method="setId"/>
  </mapping>
  <mapping class="freemind.controller.actions.instance.ArrowLinkColorXmlAction" name="arrow_link_color_xml_action">
    <structure map-as="xml_action"/>
    <value style="attribute" name="id" get-method="getId" set-method="setId"/>
    <value style="attribute" name="color" get-method="getColor" set-method="setColor" usage="optional"/>
  </mapping>
  <mapping class="freemind.controller.actions.instance.ArrowLinkArrowXmlAction" name="arrow_link_arrow_xml_action">
    <structure map-as="xml_action"/>
    <value style="attribute" name="id" get-method="getId" set-method="setId"/>
    <value style="attribute" name="end_arrow" get-method="getEndArrow" set-method="setEndArrow" usage="optional"/>
    <value style="attribute" name="start_arrow" get-method="getStartArrow" set-method="setStartArrow" usage="optional"/>
  </mapping>
  <mapping class="freemind.controller.actions.instance.ArrowLinkPointXmlAction" name="arrow_link_point_xml_action">
    <structure map-as="xml_action"/>
    <value style="attribute" name="id" get-method="getId" set-method="setId"/>
    <value style="attribute" name="end_point" get-method="getEndPoint" set-method="setEndPoint" usage="optional"/>
    <value style="attribute" name="start_point" get-method="getStartPoint" set-method="setStartPoint" usage="optional"/>
  </mapping>
  <mapping abstract="true" type-name="format_node_action" class="freemind.controller.actions.instance.FormatNodeAction">
    <structure map-as="node_action"/>
  </mapping>
  <mapping class="freemind.controller.actions.instance.BoldNodeAction" name="bold_node_action">
    <structure map-as="format_node_action"/>
    <value style="attribute" name="bold" get-method="isBold" set-method="setBold"/>
  </mapping>
  <mapping class="freemind.controller.actions.instance.StrikethroughNodeAction" name="strikethrough_node_action">
    <structure map-as="format_node_action"/>
    <value style="attribute" name="strikethrough" get-method="isStrikethrough" set-method="setStrikethrough"/>
  </mapping>
  <mapping class="freemind.controller.actions.instance.ItalicNodeAction" name="italic_node_action">
    <structure map-as="format_node_action"/>
    <value style="attribute" name="italic" get-method="isItalic" set-method="setItalic"/>
  </mapping>
  <mapping class="freemind.controller.actions.instance.UnderlinedNodeAction" name="underlined_node_action">
    <structure map-as="format_node_action"/>
    <value style="attribute" name="underlined" get-method="isUnderlined" set-method="setUnderlined"/>
  </mapping>
  <mapping class="freemind.controller.actions.instance.NodeColorFormatAction" name="node_color_format_action">
    <structure map-as="format_node_action"/>
    <value style="attribute" name="color" get-method="getColor" set-method="setColor" usage="optional"/>
  </mapping>
  <mapping class="freemind.controller.actions.instance.NodeBackgroundColorFormatAction" name="node_background_color_format_action">
    <structure map-as="format_node_action"/>
    <value style="attribute" name="color" get-method="getColor" set-method="setColor" usage="optional"/>
  </mapping>
  <mapping class="freemind.controller.actions.instance.EdgeColorFormatAction" name="edge_color_format_action">
    <structure map-as="format_node_action"/>
    <value style="attribute" name="color" get-method="getColor" set-method="setColor" usage="optional"/>
  </mapping>
  <mapping class="freemind.controller.actions.instance.EdgeStyleFormatAction" name="edge_style_format_action">
    <structure map-as="format_node_action"/>
    <value style="attribute" name="style" get-method="getStyle" set-method="setStyle" usage="optional"/>
  </mapping>
  <mapping class="freemind.controller.actions.instance.EdgeWidthFormatAction" name="edge_width_format_action">
    <structure map-as="format_node_action"/>
    <value style="attribute" name="width" get-method="getWidth" set-method="setWidth" usage="optional"/>
  </mapping>
  <mapping class="freemind.controller.actions.instance.NodeStyleFormatAction" name="node_style_format_action">
    <structure map-as="format_node_action"/>
    <value style="attribute" name="style" get-method="getStyle" set-method="setStyle" usage="optional"/>
  </mapping>
  <mapping class="freemind.controller.actions.instance.FontSizeNodeAction" name="font_size_node_action">
    <structure map-as="format_node_action"/>
    <value style="attribute" name="size" get-method="getSize" set-method="setSize"/>
  </mapping>
  <mapping class="freemind.controller.actions.instance.FontNodeAction" name="font_node_action">
    <structure map-as="format_node_action"/>
    <value style="attribute" name="font" get-method="getFont" set-method="setFont"/>
  </mapping>
  <mapping class="freemind.controller.actions.instance.DeleteNodeAction" name="delete_node_action">
    <structure map-as="node_action"/>
  </mapping>
  <mapping abstract="true" type-name="text_node_action" class="freemind.controller.actions.instance.TextNodeAction">
    <structure map-as="node_action"/>
    <value style="element" name="text" get-method="getText" set-method="setText" usage="optional"/>
  </mapping>
  <mapping class="freemind.controller.actions.instance.EditNodeAction" name="edit_node_action">
    <structure map-as="text_node_action"/>
  </mapping>
  <mapping class="freemind.controller.actions.instance.EditNoteToNodeAction" name="edit_note_to_node_action">
    <structure map-as="text_node_action"/>
  </mapping>
  <mapping class="freemind.controller.actions.instance.NewNodeAction" name="new_node_action">
    <structure map-as="node_action"/>
    <value style="attribute" name="position" get-method="getPosition" set-method="setPosition" usage="optional"/>
    <value style="attribute" name="index" get-method="getIndex" set-method="setIndex" usage="optional"/>
    <value style="attribute" name="newId" get-method="getNewId" set-method="setNewId" usage="optional"/>
  </mapping>
  <mapping class="freemind.controller.actions.instance.FoldAction" name="fold_action">
    <structure map-as="node_action"/>
    <value style="attribute" name="folded" get-method="isFolded" set-method="setFolded"/>
  </mapping>
  <mapping class="freemind.controller.actions.instance.NodeListMember" name="node_list_member">
    <value style="attribute" name="node" get-method="getNode" set-method="setNode"/>
  </mapping>
  <mapping class="freemind.controller.actions.instance.NodeChildParameter" name="node_child_parameter">
    <value style="attribute" name="key" get-method="getKey" set-method="setKey"/>
    <value style="attribute" name="value" get-method="getValue" set-method="setValue"/>
  </mapping>
  <mapping class="freemind.controller.actions.instance.MoveNodesAction" name="move_nodes_action">
    <structure map-as="node_action"/>
    <collection item-type="freemind.controller.actions.instance.NodeListMember" get-method="getNodeListMemberList" set-method="setNodeListMemberList" create-type="java.util.ArrayList"/>
    <value style="attribute" name="direction" get-method="getDirection" set-method="setDirection"/>
  </mapping>
  <mapping class="freemind.controller.actions.instance.PlaceNodeXmlAction" name="place_node_xml_action">
    <structure map-as="node_action"/>
    <value style="attribute" name="map_center_longitude" get-method="getMapCenterLongitude" set-method="setMapCenterLongitude" usage="optional"/>
    <value style="attribute" name="map_center_latitude" get-method="getMapCenterLatitude" set-method="setMapCenterLatitude" usage="optional"/>
    <value style="attribute" name="cursor_longitude" get-method="getCursorLongitude" set-method="setCursorLongitude" usage="optional"/>
    <value style="attribute" name="cursor_latitude" get-method="getCursorLatitude" set-method="setCursorLatitude" usage="optional"/>
    <value style="attribute" name="zoom" get-method="getZoom" set-method="setZoom" usage="optional"/>
    <value style="attribute" name="tile_source" get-method="getTileSource" set-method="setTileSource" usage="optional"/>
  </mapping>
  <mapping class="freemind.controller.actions.instance.Place" name="place">
    <structure map-as="xml_action"/>
    <value style="attribute" name="place_id" get-method="getPlaceId" set-method="setPlaceId" usage="optional"/>
    <value style="attribute" name="osm_type" get-method="getOsmType" set-method="setOsmType" usage="optional"/>
    <value style="attribute" name="osm_id" get-method="getOsmId" set-method="setOsmId" usage="optional"/>
    <value style="attribute" name="place_rank" get-method="getPlaceRank" set-method="setPlaceRank" usage="optional"/>
    <value style="attribute" name="boundingbox" get-method="getBoundingbox" set-method="setBoundingbox" usage="optional"/>
    <value style="attribute" name="lat" get-method="getLat" set-method="setLat" usage="optional"/>
    <value style="attribute" name="lon" get-method="getLon" set-method="setLon" usage="optional"/>
    <value style="attribute" name="display_name" get-method="getDisplayName" set-method="setDisplayName" usage="optional"/>
    <value style="attribute" name="class" get-method="get_Class" set-method="set_Class" usage="optional"/>
    <value style="attribute" name="type" get-method="getType" set-method="setType" usage="optional"/>
    <value style="attribute" name="icon" get-method="getIcon" set-method="setIcon" usage="optional"/>
  </mapping>
  <mapping class="freemind.controller.actions.instance.Searchresults" name="searchresults">
    <structure map-as="xml_action"/>
    <collection item-type="freemind.controller.actions.instance.Place" get-method="getPlaceList" set-method="setPlaceList" usage="optional" create-type="java.util.ArrayList"/>
    <value style="attribute" name="timestamp" get-method="getTimestamp" set-method="setTimestamp" usage="optional"/>
    <value style="attribute" name="attribution" get-method="getAttribution" set-method="setAttribution" usage="optional"/>
    <value style="attribute" name="querystring" get-method="getQuerystring" set-method="setQuerystring" usage="optional"/>
    <value style="attribute" name="polygon" get-method="getPolygon" set-method="setPolygon" usage="optional"/>
    <value style="attribute" name="exclude_place_ids" get-method="getExcludePlaceIds" set-method="setExcludePlaceIds" usage="optional"/>
    <value style="attribute" name="more_url" get-method="getMoreUrl" set-method="setMoreUrl" usage="optional"/>
  </mapping>
  <mapping class="freemind.controller.actions.instance.Reversegeocode" name="reversegeocode">
    <structure map-as="xml_action"/>
    <structure type="freemind.controller.actions.instance.ResultBase" get-method="getResult" set-method="setResult"/>
    <value style="attribute" name="attribution" get-method="getAttribution" set-method="setAttribution"/>
    <value style="attribute" name="querystring" get-method="getQuerystring" set-method="setQuerystring"/>
    <value style="attribute" name="timestamp" get-method="getTimestamp" set-method="setTimestamp"/>
  </mapping>
  <mapping abstract="true" type-name="result_base" class="freemind.controller.actions.instance.ResultBase">
    <value style="attribute" name="lat" get-method="getLat" set-method="setLat"/>
    <value style="attribute" name="lon" get-method="getLon" set-method="setLon"/>
    <value style="attribute" name="osm_id" get-method="getOsmId" set-method="setOsmId"/>
    <value style="attribute" name="osm_type" get-method="getOsmType" set-method="setOsmType"/>
    <value style="attribute" name="place_id" get-method="getPlaceId" set-method="setPlaceId"/>
    <value style="attribute" name="ref" get-method="getRef" set-method="setRef" usage="optional"/>
  </mapping>
  <mapping class="freemind.controller.actions.instance.ResultBase" name="result">
    <structure map-as="result_base"/>
  </mapping>
  <mapping class="freemind.controller.actions.instance.CalendarMarkings" name="calendar_markings">
    <structure map-as="xml_action"/>
    <collection item-type="freemind.controller.actions.instance.CalendarMarking" get-method="getCalendarMarkingList" set-method="setCalendarMarkingList" create-type="java.util.ArrayList"/>
  </mapping>
  <mapping class="freemind.controller.actions.instance.CalendarMarking" name="calendar_marking">
    <format type="freemind.controller.actions.instance.CalendarMarking$RepeatType" enum-value-method="xmlValue"/>
    <value style="attribute" name="name" get-method="getName" set-method="setName"/>
    <value style="attribute" name="color" get-method="getColor" set-method="setColor"/>
    <value style="attribute" name="start_date" get-method="getStartDate" set-method="setStartDate"/>
    <value style="attribute" name="end_date" get-method="getEndDate" set-method="setEndDate" usage="optional"/>
    <value style="attribute" name="repeat_type" get-method="getRepeatType" set-method="setRepeatType"/>
    <value style="attribute" name="repeat_each_n_occurence" get-method="getRepeatEachNOccurence" set-method="setRepeatEachNOccurence" usage="optional"/>
    <value style="attribute" name="first_occurence" get-method="getFirstOccurence" set-method="setFirstOccurence" usage="optional"/>
  </mapping>
  <mapping class="freemind.controller.actions.instance.HookNodeAction" name="hook_node_action">
    <structure map-as="node_action"/>
    <collection item-type="freemind.controller.actions.instance.NodeListMember" get-method="getNodeListMemberList" set-method="setNodeListMemberList" create-type="java.util.ArrayList"/>
    <collection item-type="freemind.controller.actions.instance.NodeChildParameter" get-method="getNodeChildParameterList" set-method="setNodeChildParameterList" usage="optional" create-type="java.util.ArrayList"/>
    <value style="attribute" name="hook_name" get-method="getHookName" set-method="setHookName"/>
  </mapping>
  <mapping class="freemind.controller.actions.instance.CollaborationAction" name="collaboration_action">
    <format type="freemind.controller.actions.instance.CollaborationAction$Cmd" enum-value-method="xmlValue"/>
    <structure map-as="xml_action"/>
    <value style="attribute" name="user" get-method="getUser" set-method="setUser" usage="optional"/>
    <value style="attribute" name="timestamp" get-method="getTimestamp" set-method="setTimestamp" usage="optional"/>
    <value style="attribute" name="cmd" get-method="getCmd" set-method="setCmd"/>
    <value style="attribute" name="map" get-method="getMap" set-method="setMap" usage="optional"/>
    <value style="attribute" name="filename" get-method="getFilename" set-method="setFilename" usage="optional"/>
  </mapping>
  <mapping abstract="true" type-name="collaboration_action_base" class="freemind.controller.actions.instance.CollaborationActionBase">
    <structure map-as="xml_action"/>
  </mapping>
  <mapping class="freemind.controller.actions.instance.CollaborationRequireLock" name="collaboration_require_lock">
    <structure map-as="collaboration_action_base"/>
  </mapping>
  <mapping class="freemind.controller.actions.instance.CollaborationUserInformation" name="collaboration_user_information">
    <structure map-as="collaboration_action_base"/>
    <value style="attribute" name="user_ids" get-method="getUserIds" set-method="setUserIds"/>
    <value style="attribute" name="master_ip" get-method="getMasterIp" set-method="setMasterIp"/>
    <value style="attribute" name="master_port" get-method="getMasterPort" set-method="setMasterPort"/>
    <value style="attribute" name="master_hostname" get-method="getMasterHostname" set-method="setMasterHostname"/>
  </mapping>
  <mapping class="freemind.controller.actions.instance.CollaborationWhoAreYou" name="collaboration_who_are_you">
    <structure map-as="collaboration_action_base"/>
    <value style="attribute" name="server_version" get-method="getServerVersion" set-method="setServerVersion" usage="optional"/>
  </mapping>
  <mapping class="freemind.controller.actions.instance.CollaborationPublishNewMap" name="collaboration_publish_new_map">
    <structure map-as="collaboration_action_base"/>
    <value style="attribute" name="user_id" get-method="getUserId" set-method="setUserId"/>
    <value style="attribute" name="password" get-method="getPassword" set-method="setPassword"/>
    <value style="attribute" name="map" get-method="getMap" set-method="setMap"/>
    <value style="attribute" name="map_name" get-method="getMapName" set-method="setMapName"/>
  </mapping>
  <mapping class="freemind.controller.actions.instance.CollaborationGetOffers" name="collaboration_get_offers">
    <structure map-as="collaboration_action_base"/>
    <value style="attribute" name="user_id" get-method="getUserId" set-method="setUserId"/>
    <value style="attribute" name="password" get-method="getPassword" set-method="setPassword"/>
  </mapping>
  <mapping class="freemind.controller.actions.instance.CollaborationHello" name="collaboration_hello">
    <structure map-as="collaboration_action_base"/>
    <value style="attribute" name="map" get-method="getMap" set-method="setMap"/>
  </mapping>
  <mapping class="freemind.controller.actions.instance.CollaborationMapOffer" name="collaboration_map_offer">
    <value style="attribute" name="map" get-method="getMap" set-method="setMap"/>
  </mapping>
  <mapping class="freemind.controller.actions.instance.CollaborationOffers" name="collaboration_offers">
    <structure map-as="collaboration_action_base"/>
    <collection item-type="freemind.controller.actions.instance.CollaborationMapOffer" get-method="getCollaborationMapOfferList" set-method="setCollaborationMapOfferList" usage="optional" create-type="java.util.ArrayList"/>
    <value style="attribute" name="is_single_offer" get-method="getIsSingleOffer" set-method="setIsSingleOffer" usage="optional"/>
  </mapping>
  <mapping class="freemind.controller.actions.instance.CollaborationWelcome" name="collaboration_welcome">
    <structure map-as="collaboration_action_base"/>
    <value style="attribute" name="map" get-method="getMap" set-method="setMap" usage="optional"/>
    <value style="attribute" name="filename" get-method="getFilename" set-method="setFilename" usage="optional"/>
  </mapping>
  <mapping class="freemind.controller.actions.instance.CollaborationGoodbye" name="collaboration_goodbye">
    <structure map-as="collaboration_action_base"/>
    <value style="attribute" name="user_id" get-method="getUserId" set-method="setUserId"/>
  </mapping>
  <mapping class="freemind.controller.actions.instance.CollaborationUnableToLock" name="collaboration_unable_to_lock">
    <structure map-as="collaboration_action_base"/>
  </mapping>
  <mapping class="freemind.controller.actions.instance.CollaborationWrongCredentials" name="collaboration_wrong_credentials">
    <structure map-as="collaboration_action_base"/>
  </mapping>
  <mapping class="freemind.controller.actions.instance.CollaborationWrongMap" name="collaboration_wrong_map">
    <structure map-as="collaboration_action_base"/>
  </mapping>
  <mapping class="freemind.controller.actions.instance.CollaborationReceiveLock" name="collaboration_receive_lock">
    <structure map-as="collaboration_action_base"/>
    <value style="attribute" name="id" get-method="getId" set-method="setId"/>
  </mapping>
  <mapping class="freemind.controller.actions.instance.CollaborationTransaction" name="collaboration_transaction">
    <structure map-as="collaboration_action_base"/>
    <value style="attribute" name="id" get-method="getId" set-method="setId"/>
    <value style="attribute" name="do_action" get-method="getDoAction" set-method="setDoAction"/>
    <value style="attribute" name="undo_action" get-method="getUndoAction" set-method="setUndoAction"/>
  </mapping>
  <mapping abstract="true" type-name="window_configuration_storage" class="freemind.controller.actions.instance.WindowConfigurationStorage">
    <structure map-as="xml_action"/>
    <value style="attribute" name="x" get-method="getX" set-method="setX"/>
    <value style="attribute" name="y" get-method="getY" set-method="setY"/>
    <value style="attribute" name="width" get-method="getWidth" set-method="setWidth"/>
    <value style="attribute" name="height" get-method="getHeight" set-method="setHeight"/>
  </mapping>
  <mapping class="freemind.controller.actions.instance.NormalWindowConfigurationStorage" name="normal_window_configuration_storage">
    <structure map-as="window_configuration_storage"/>
  </mapping>
  <mapping class="freemind.controller.actions.instance.OptionPanelWindowConfigurationStorage" name="option_panel_window_configuration_storage">
    <structure map-as="window_configuration_storage"/>
    <value style="attribute" name="panel" get-method="getPanel" set-method="setPanel" usage="optional"/>
  </mapping>
  <mapping class="freemind.controller.actions.instance.TimeWindowConfigurationStorage" name="time_window_configuration_storage">
    <structure map-as="window_configuration_storage"/>
    <collection item-type="freemind.controller.actions.instance.TimeWindowColumnSetting" get-method="getTimeWindowColumnSettingList" set-method="setTimeWindowColumnSettingList" usage="optional" create-type="java.util.ArrayList"/>
    <value style="attribute" name="view_folded_nodes" get-method="getViewFoldedNodes" set-method="setViewFoldedNodes" usage="optional"/>
  </mapping>
  <mapping class="freemind.controller.actions.instance.MapLocationStorage" name="map_location_storage">
    <value style="attribute" name="cursor_longitude" get-method="getCursorLongitude" set-method="setCursorLongitude" usage="optional"/>
    <value style="attribute" name="cursor_latitude" get-method="getCursorLatitude" set-method="setCursorLatitude" usage="optional"/>
    <value style="attribute" name="zoom" get-method="getZoom" set-method="setZoom" usage="optional"/>
  </mapping>
  <mapping class="freemind.controller.actions.instance.MapWindowConfigurationStorage" name="map_window_configuration_storage">
    <structure map-as="window_configuration_storage"/>
    <collection item-type="freemind.controller.actions.instance.TableColumnSettingStore" get-method="getTableColumnSettingList" set-method="setTableColumnSettingList" usage="optional" create-type="java.util.ArrayList"/>
    <collection item-type="freemind.controller.actions.instance.MapLocationStorage" get-method="getMapLocationStorageList" set-method="setMapLocationStorageList" usage="optional" create-type="java.util.ArrayList"/>
    <value style="attribute" name="map_center_longitude" get-method="getMapCenterLongitude" set-method="setMapCenterLongitude" usage="optional"/>
    <value style="attribute" name="map_center_latitude" get-method="getMapCenterLatitude" set-method="setMapCenterLatitude" usage="optional"/>
    <value style="attribute" name="cursor_longitude" get-method="getCursorLongitude" set-method="setCursorLongitude" usage="optional"/>
    <value style="attribute" name="cursor_latitude" get-method="getCursorLatitude" set-method="setCursorLatitude" usage="optional"/>
    <value style="attribute" name="zoom" get-method="getZoom" set-method="setZoom" usage="optional"/>
    <value style="attribute" name="last_divider_position" get-method="getLastDividerPosition" set-method="setLastDividerPosition" usage="optional"/>
    <value style="attribute" name="tile_source" get-method="getTileSource" set-method="setTileSource" usage="optional"/>
    <value style="attribute" name="showMapMarker" get-method="getShowMapMarker" set-method="setShowMapMarker" usage="optional"/>
    <value style="attribute" name="tileGridVisible" get-method="getTileGridVisible" set-method="setTileGridVisible" usage="optional"/>
    <value style="attribute" name="zoomControlsVisible" get-method="getZoomControlsVisible" set-method="setZoomControlsVisible" usage="optional"/>
    <value style="attribute" name="searchControlVisible" get-method="getSearchControlVisible" set-method="setSearchControlVisible" usage="optional"/>
    <value style="attribute" name="hideFoldedNodes" get-method="getHideFoldedNodes" set-method="setHideFoldedNodes" usage="optional"/>
    <value style="attribute" name="limitSearchToVisibleArea" get-method="getLimitSearchToVisibleArea" set-method="setLimitSearchToVisibleArea" usage="optional"/>
    <value style="attribute" name="map_location_storage_index" get-method="getMapLocationStorageIndex" set-method="setMapLocationStorageIndex" usage="optional"/>
  </mapping>
  <mapping class="freemind.controller.actions.instance.TableColumnOrder" name="table_column_order">
    <value style="attribute" name="column_index" get-method="getColumnIndex" set-method="setColumnIndex"/>
    <value style="attribute" name="column_sorting" get-method="getColumnSorting" set-method="setColumnSorting"/>
  </mapping>
  <mapping abstract="true" type-name="attribute_table_properties" class="freemind.controller.actions.instance.AttributeTableProperties">
    <structure map-as="xml_action"/>
    <collection item-type="freemind.controller.actions.instance.TableColumnOrder" get-method="getTableColumnOrderList" set-method="setTableColumnOrderList" usage="optional" create-type="java.util.ArrayList"/>
  </mapping>
  <mapping class="freemind.controller.actions.instance.SetAttributeAction" name="set_attribute_action">
    <structure map-as="node_action"/>
    <value style="attribute" name="position" get-method="getPosition" set-method="setPosition"/>
    <value style="attribute" name="name" get-method="getName" set-method="setName"/>
    <value style="attribute" name="value" get-method="getValue" set-method="setValue"/>
  </mapping>
  <mapping class="freemind.controller.actions.instance.InsertAttributeAction" name="insert_attribute_action">
    <structure map-as="node_action"/>
    <value style="attribute" name="position" get-method="getPosition" set-method="setPosition"/>
    <value style="attribute" name="name" get-method="getName" set-method="setName"/>
    <value style="attribute" name="value" get-method="getValue" set-method="setValue"/>
  </mapping>
  <mapping class="freemind.controller.actions.instance.AddAttributeAction" name="add_attribute_action">
    <structure map-as="node_action"/>
    <value style="attribute" name="name" get-method="getName" set-method="setName"/>
    <value style="attribute" name="value" get-method="getValue" set-method="setValue"/>
  </mapping>
  <mapping class="freemind.controller.actions.instance.RemoveAttributeAction" name="remove_attribute_action">
    <structure map-as="node_action"/>
    <value style="attribute" name="position" get-method="getPosition" set-method="setPosition"/>
  </mapping>
  <mapping class="freemind.controller.actions.instance.LogFileViewerConfigurationStorage" name="log_file_viewer_configuration_storage">
    <structure map-as="window_configuration_storage"/>
  </mapping>
  <mapping abstract="true" type-name="table_column_setting_store" class="freemind.controller.actions.instance.TableColumnSettingStore">
    <value style="attribute" name="column_width" get-method="getColumnWidth" set-method="setColumnWidth"/>
    <value style="attribute" name="column_sorting" get-method="getColumnSorting" set-method="setColumnSorting" usage="optional"/>
  </mapping>
  <mapping class="freemind.controller.actions.instance.TableColumnSettingStore" name="table_column_setting">
    <structure map-as="table_column_setting_store"/>
  </mapping>
  <mapping class="freemind.controller.actions.instance.TimeWindowColumnSetting" name="time_window_column_setting">
    <structure map-as="table_column_setting_store"/>
    <value style="attribute" name="placeholder" get-method="getPlaceholder" set-method="setPlaceholder" usage="optional"/>
  </mapping>
  <mapping class="freemind.controller.actions.instance.ScriptEditorWindowConfigurationStorage" name="script_editor_window_configuration_storage">
    <structure map-as="window_configuration_storage"/>
    <value style="attribute" name="left_ratio" get-method="getLeftRatio" set-method="setLeftRatio" usage="optional"/>
    <value style="attribute" name="top_ratio" get-method="getTopRatio" set-method="setTopRatio" usage="optional"/>
  </mapping>
  <mapping class="freemind.controller.actions.instance.ManageStyleEditorWindowConfigurationStorage" name="manage_style_editor_window_configuration_storage">
    <structure map-as="window_configuration_storage"/>
    <value style="attribute" name="divider_position" get-method="getDividerPosition" set-method="setDividerPosition" usage="optional"/>
  </mapping>
  <mapping class="freemind.controller.actions.instance.MindmapLastStateStorage" name="mindmap_last_state_storage">
    <structure map-as="xml_action"/>
    <collection item-type="freemind.controller.actions.instance.NodeListMember" get-method="getNodeListMemberList" set-method="setNodeListMemberList" usage="optional" create-type="java.util.ArrayList"/>
    <value style="attribute" name="last_changed" get-method="getLastChanged" set-method="setLastChanged"/>
    <value style="attribute" name="tab_index" get-method="getTabIndex" set-method="setTabIndex"/>
    <value style="attribute" name="restorable_name" get-method="getRestorableName" set-method="setRestorableName"/>
    <value style="attribute" name="last_zoom" get-method="getLastZoom" set-method="setLastZoom"/>
    <value style="attribute" name="x" get-method="getX" set-method="setX"/>
    <value style="attribute" name="y" get-method="getY" set-method="setY"/>
    <value style="attribute" name="last_selected" get-method="getLastSelected" set-method="setLastSelected"/>
  </mapping>
  <mapping abstract="true" type-name="mindmap_last_state_map_storage" class="freemind.controller.actions.instance.MindmapLastStateMapStorage">
    <structure map-as="xml_action"/>
    <collection item-type="freemind.controller.actions.instance.MindmapLastStateStorage" get-method="getMindmapLastStateStorageList" set-method="setMindmapLastStateStorageList" usage="optional" create-type="java.util.ArrayList"/>
    <value style="attribute" name="last_focused_tab" get-method="getLastFocusedTab" set-method="setLastFocusedTab" usage="optional"/>
  </mapping>
  <mapping abstract="true" type-name="pattern_property_base" class="freemind.controller.actions.instance.PatternPropertyBase">
    <value style="attribute" name="value" get-method="getValue" set-method="setValue" usage="optional"/>
  </mapping>
  <mapping class="freemind.controller.actions.instance.PatternNodeBackgroundColor" name="pattern_node_background_color">
    <structure map-as="pattern_property_base"/>
  </mapping>
  <mapping class="freemind.controller.actions.instance.PatternNodeColor" name="pattern_node_color">
    <structure map-as="pattern_property_base"/>
  </mapping>
  <mapping class="freemind.controller.actions.instance.PatternNodeStyle" name="pattern_node_style">
    <structure map-as="pattern_property_base"/>
  </mapping>
  <mapping class="freemind.controller.actions.instance.PatternNodeText" name="pattern_node_text">
    <structure map-as="pattern_property_base"/>
  </mapping>
  <mapping class="freemind.controller.actions.instance.PatternNodeFontName" name="pattern_node_font_name">
    <structure map-as="pattern_property_base"/>
  </mapping>
  <mapping class="freemind.controller.actions.instance.PatternNodeFontBold" name="pattern_node_font_bold">
    <structure map-as="pattern_property_base"/>
  </mapping>
  <mapping class="freemind.controller.actions.instance.PatternNodeFontStrikethrough" name="pattern_node_font_strikethrough">
    <structure map-as="pattern_property_base"/>
  </mapping>
  <mapping class="freemind.controller.actions.instance.PatternNodeFontItalic" name="pattern_node_font_italic">
    <structure map-as="pattern_property_base"/>
  </mapping>
  <mapping class="freemind.controller.actions.instance.PatternNodeFontSize" name="pattern_node_font_size">
    <structure map-as="pattern_property_base"/>
  </mapping>
  <mapping class="freemind.controller.actions.instance.PatternIcon" name="pattern_icon">
    <structure map-as="pattern_property_base"/>
  </mapping>
  <mapping class="freemind.controller.actions.instance.PatternEdgeColor" name="pattern_edge_color">
    <structure map-as="pattern_property_base"/>
  </mapping>
  <mapping class="freemind.controller.actions.instance.PatternEdgeStyle" name="pattern_edge_style">
    <structure map-as="pattern_property_base"/>
  </mapping>
  <mapping class="freemind.controller.actions.instance.PatternEdgeWidth" name="pattern_edge_width">
    <structure map-as="pattern_property_base"/>
  </mapping>
  <mapping class="freemind.controller.actions.instance.PatternChild" name="pattern_child">
    <structure map-as="pattern_property_base"/>
  </mapping>
  <mapping class="freemind.controller.actions.instance.PatternScript" name="pattern_script">
    <structure map-as="pattern_property_base"/>
  </mapping>
  <mapping class="freemind.controller.actions.instance.Pattern" name="pattern">
    <structure map-as="xml_action"/>
    <structure usage="optional" ordered="false" choice="true">
      <structure type="freemind.controller.actions.instance.PatternNodeBackgroundColor" test-method="ifPatternNodeBackgroundColor" get-method="getPatternNodeBackgroundColor" set-method="setPatternNodeBackgroundColor" usage="optional"/>
      <structure type="freemind.controller.actions.instance.PatternNodeColor" test-method="ifPatternNodeColor" get-method="getPatternNodeColor" set-method="setPatternNodeColor" usage="optional"/>
      <structure type="freemind.controller.actions.instance.PatternNodeStyle" test-method="ifPatternNodeStyle" get-method="getPatternNodeStyle" set-method="setPatternNodeStyle" usage="optional"/>
      <structure type="freemind.controller.actions.instance.PatternNodeText" test-method="ifPatternNodeText" get-method="getPatternNodeText" set-method="setPatternNodeText" usage="optional"/>
      <structure type="freemind.controller.actions.instance.PatternNodeFontName" test-method="ifPatternNodeFontName" get-method="getPatternNodeFontName" set-method="setPatternNodeFontName" usage="optional"/>
      <structure type="freemind.controller.actions.instance.PatternNodeFontBold" test-method="ifPatternNodeFontBold" get-method="getPatternNodeFontBold" set-method="setPatternNodeFontBold" usage="optional"/>
      <structure type="freemind.controller.actions.instance.PatternNodeFontStrikethrough" test-method="ifPatternNodeFontStrikethrough" get-method="getPatternNodeFontStrikethrough" set-method="setPatternNodeFontStrikethrough" usage="optional"/>
      <structure type="freemind.controller.actions.instance.PatternNodeFontItalic" test-method="ifPatternNodeFontItalic" get-method="getPatternNodeFontItalic" set-method="setPatternNodeFontItalic" usage="optional"/>
      <structure type="freemind.controller.actions.instance.PatternNodeFontSize" test-method="ifPatternNodeFontSize" get-method="getPatternNodeFontSize" set-method="setPatternNodeFontSize" usage="optional"/>
      <structure type="freemind.controller.actions.instance.PatternIcon" test-method="ifPatternIcon" get-method="getPatternIcon" set-method="setPatternIcon" usage="optional"/>
      <structure type="freemind.controller.actions.instance.PatternEdgeColor" test-method="ifPatternEdgeColor" get-method="getPatternEdgeColor" set-method="setPatternEdgeColor" usage="optional"/>
      <structure type="freemind.controller.actions.instance.PatternEdgeStyle" test-method="ifPatternEdgeStyle" get-method="getPatternEdgeStyle" set-method="setPatternEdgeStyle" usage="optional"/>
      <structure type="freemind.controller.actions.instance.PatternEdgeWidth" test-method="ifPatternEdgeWidth" get-method="getPatternEdgeWidth" set-method="setPatternEdgeWidth" usage="optional"/>
      <structure type="freemind.controller.actions.instance.PatternChild" test-method="ifPatternChild" get-method="getPatternChild" set-method="setPatternChild" usage="optional"/>
      <structure type="freemind.controller.actions.instance.PatternScript" test-method="ifPatternScript" get-method="getPatternScript" set-method="setPatternScript" usage="optional"/>
    </structure>
    <value style="attribute" name="name" get-method="getName" set-method="setName" usage="optional"/>
    <value style="attribute" name="original_name" get-method="getOriginalName" set-method="setOriginalName" usage="optional"/>
  </mapping>
  <mapping class="freemind.controller.actions.instance.Patterns" name="patterns">
    <structure map-as="xml_action"/>
    <collection item-type="freemind.controller.actions.instance.Pattern" get-method="getPatternList" set-method="setPatternList" usage="optional" create-type="java.util.ArrayList"/>
  </mapping>
  <mapping class="freemind.controller.actions.instance.Plugin" name="plugin">
    <collection get-method="getChoiceList" set-method="setChoiceList" usage="optional" create-type="java.util.ArrayList">
      <structure type="freemind.controller.actions.instance.Plugin$Choice" ordered="false" choice="true">
        <structure type="freemind.controller.actions.instance.PluginClasspath" test-method="ifPluginClasspath" get-method="getPluginClasspath" set-method="setPluginClasspath" usage="optional"/>
        <structure type="freemind.controller.actions.instance.PluginRegistration" test-method="ifPluginRegistration" get-method="getPluginRegistration" set-method="setPluginRegistration" usage="optional"/>
        <structure type="freemind.controller.actions.instance.PluginAction" test-method="ifPluginAction" get-method="getPluginAction" set-method="setPluginAction" usage="optional"/>
        <structure type="freemind.controller.actions.instance.PluginStrings" test-method="ifPluginStrings" get-method="getPluginStrings" set-method="setPluginStrings" usage="optional"/>
      </structure>
    </collection>
    <value style="attribute" name="label" get-method="getLabel" set-method="setLabel"/>
  </mapping>
  <mapping class="freemind.controller.actions.instance.PluginClasspath" name="plugin_classpath">
    <value style="attribute" name="jar" get-method="getJar" set-method="setJar"/>
  </mapping>
  <mapping class="freemind.controller.actions.instance.PluginRegistration" name="plugin_registration">
    <collection item-type="freemind.controller.actions.instance.PluginMode" get-method="getPluginModeList" set-method="setPluginModeList" create-type="java.util.ArrayList"/>
    <value style="attribute" name="class_name" get-method="getClassName" set-method="setClassName"/>
    <value style="attribute" name="isPluginBase" get-method="getIsPluginBase" set-method="setIsPluginBase" usage="optional"/>
  </mapping>
  <mapping class="freemind.controller.actions.instance.PluginMode" name="plugin_mode">
    <value style="attribute" name="class_name" get-method="getClassName" set-method="setClassName"/>
  </mapping>
  <mapping class="freemind.controller.actions.instance.PluginProperty" name="plugin_property">
    <value style="attribute" name="name" get-method="getName" set-method="setName"/>
    <value style="attribute" name="value" get-method="getValue" set-method="setValue" usage="optional"/>
  </mapping>
  <mapping class="freemind.controller.actions.instance.PluginAction" name="plugin_action">
    <format type="freemind.controller.actions.instance.PluginAction$Instanciation" enum-value-method="xmlValue"/>
    <collection get-method="getChoiceList" set-method="setChoiceList" usage="optional" create-type="java.util.ArrayList">
      <structure type="freemind.controller.actions.instance.PluginAction$Choice" ordered="false" choice="true">
        <structure type="freemind.controller.actions.instance.PluginMode" test-method="ifPluginMode" get-method="getPluginMode" set-method="setPluginMode" usage="optional"/>
        <structure type="freemind.controller.actions.instance.PluginMenu" test-method="ifPluginMenu" get-method="getPluginMenu" set-method="setPluginMenu" usage="optional"/>
        <structure type="freemind.controller.actions.instance.PluginProperty" test-method="ifPluginProperty" get-method="getPluginProperty" set-method="setPluginProperty" usage="optional"/>
      </structure>
    </collection>
    <value style="attribute" name="label" get-method="getLabel" set-method="setLabel"/>
    <value style="attribute" name="name" get-method="getName" set-method="setName" usage="optional"/>
    <value style="attribute" name="base" get-method="getBase" set-method="setBase"/>
    <value style="attribute" name="class_name" get-method="getClassName" set-method="setClassName"/>
    <value style="attribute" name="documentation" get-method="getDocumentation" set-method="setDocumentation" usage="optional"/>
    <value style="attribute" name="icon_path" get-method="getIconPath" set-method="setIconPath" usage="optional"/>
    <value style="attribute" name="key_stroke" get-method="getKeyStroke" set-method="setKeyStroke" usage="optional"/>
    <value style="attribute" name="instanciation" get-method="getInstanciation" set-method="setInstanciation" usage="optional"/>
    <value style="attribute" name="isSelectable" get-method="getIsSelectable" set-method="setIsSelectable" usage="optional"/>
  </mapping>
  <mapping class="freemind.controller.actions.instance.PluginMenu" name="plugin_menu">
    <value style="attribute" name="location" get-method="getLocation" set-method="setLocation"/>
  </mapping>
  <mapping class="freemind.controller.actions.instance.PluginStrings" name="plugin_strings">
    <collection item-type="freemind.controller.actions.instance.PluginString" get-method="getPluginStringList" set-method="setPluginStringList" usage="optional" create-type="java.util.ArrayList"/>
    <value style="attribute" name="language" get-method="getLanguage" set-method="setLanguage"/>
  </mapping>
  <mapping class="freemind.controller.actions.instance.PluginString" name="plugin_string">
    <value style="attribute" name="key" get-method="getKey" set-method="setKey"/>
    <value style="attribute" name="value" get-method="getValue" set-method="setValue"/>
  </mapping>
  <mapping class="freemind.controller.actions.instance.NodeList" name="node_list">
    <structure map-as="xml_action"/>
    <collection item-type="freemind.controller.actions.instance.NodeListMember" get-method="getNodeListMemberList" set-method="setNodeListMemberList" create-type="java.util.ArrayList"/>
  </mapping>
  <mapping abstract="true" type-name="base-Group" class="freemind.controller.actions.instance.Base">
    <structure ordered="false" choice="true">
      <structure type="freemind.controller.actions.instance.MenuCategoryBase" test-method="ifMenuCategory" get-method="getMenuCategory" set-method="setMenuCategory" usage="optional"/>
      <structure type="freemind.controller.actions.instance.MenuSubmenu" test-method="ifMenuSubmenu" get-method="getMenuSubmenu" set-method="setMenuSubmenu" usage="optional"/>
      <structure type="freemind.controller.actions.instance.MenuAction" test-method="ifMenuAction" get-method="getMenuAction" set-method="setMenuAction" usage="optional"/>
      <structure type="freemind.controller.actions.instance.MenuCheckedAction" test-method="ifMenuCheckedAction" get-method="getMenuCheckedAction" set-method="setMenuCheckedAction" usage="optional"/>
      <structure type="freemind.controller.actions.instance.MenuRadioAction" test-method="ifMenuRadioAction" get-method="getMenuRadioAction" set-method="setMenuRadioAction" usage="optional"/>
      <structure type="freemind.controller.actions.instance.MenuSeparator" test-method="ifMenuSeparator" get-method="getMenuSeparator" set-method="setMenuSeparator" usage="optional"/>
    </structure>
  </mapping>
  <mapping class="freemind.controller.actions.instance.MenuStructure" name="menu_structure">
    <collection item-type="freemind.controller.actions.instance.MenuCategoryBase" get-method="getMenuCategoryList" set-method="setMenuCategoryList" usage="optional" create-type="java.util.ArrayList"/>
  </mapping>
  <mapping abstract="true" type-name="menu_category_base" class="freemind.controller.actions.instance.MenuCategoryBase">
    <collection get-method="getBaseList" set-method="setBaseList" usage="optional" create-type="java.util.ArrayList">
      <structure map-as="base-Group"/>
    </collection>
    <value style="attribute" name="name" get-method="getName" set-method="setName"/>
  </mapping>
  <mapping class="freemind.controller.actions.instance.MenuCategoryBase" name="menu_category">
    <structure map-as="menu_category_base"/>
  </mapping>
  <mapping class="freemind.controller.actions.instance.MenuSubmenu" name="menu_submenu">
    <structure map-as="menu_category_base"/>
    <value style="attribute" name="name_ref" get-method="getNameRef" set-method="setNameRef"/>
  </mapping>
  <mapping abstract="true" type-name="menu_action_base" class="freemind.controller.actions.instance.MenuActionBase">
    <value style="attribute" name="field" get-method="getField" set-method="setField"/>
    <value style="attribute" name="key_ref" get-method="getKeyRef" set-method="setKeyRef" usage="optional"/>
    <value style="attribute" name="name" get-method="getName" set-method="setName" usage="optional"/>
  </mapping>
  <mapping class="freemind.controller.actions.instance.MenuAction" name="menu_action">
    <structure map-as="menu_action_base"/>
  </mapping>
  <mapping class="freemind.controller.actions.instance.MenuCheckedAction" name="menu_checked_action">
    <structure map-as="menu_action_base"/>
  </mapping>
  <mapping class="freemind.controller.actions.instance.MenuRadioAction" name="menu_radio_action">
    <structure map-as="menu_action_base"/>
    <value style="attribute" name="selected" get-method="getSelected" set-method="setSelected" usage="optional"/>
  </mapping>
  <mapping class="freemind.controller.actions.instance.MenuSeparator" name="menu_separator"/>
</binding>